[Data Structures]
- Abstract data type(adt): defines operations but not their implementation
    - logical view
    - operations
    - cost of operations
    - implementation


[Linked List]
- The data is stored into nodes, each node have a value and a next field, the next field is a pointer to the next node
in the list.
- By convention the first node of the list is called "head", and the last is called "tail"

class Node:
    def __init__(self, value, next):
        self.value = value
        self.next = next


[Memory]
Basically memory is a one byte array, where each byte represents one position in the array and the value stored into it
is the value of some variable. For example 1 integer uses 4 bytes of memory in the array, where 1 char uses 1 byte in the array.

How arrays works in memory?
Array in memory is a prefixed set of sequential values, so if a array uses 16 bytes in memory it can't go higher(uses more memory)
than what's is already using, whats happen under the hood is that the array is deleted and another array in the memory is created
with more space.

[Pointers]
- They are just variables that hold memory addresses.
- The operator "*" is a deference operator, which means that he can access/manipulate the value in some memory address.

1) Create pointer variable
int *px 

2) Access memory address of variable
&x

3) Assign memory address to pointer
px = &x

4) Access value of memory address in pointer
*px


[Big O Notation and Time Complexity]
Time complexity: how the runtime increases as the length increases too.
By convention BigO notation is used without any coefficient, for example, O(2n^2) is equal to O(n^2)
O(1) - constant time
O(n) - linear time
O(n2) - quadratic time
